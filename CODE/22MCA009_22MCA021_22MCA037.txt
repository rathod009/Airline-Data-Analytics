# -*- coding: utf-8 -*-
"""Airport_Analysis_PySpark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eneg2d53kEvcbEmy_ngrqz5MzWaCQg3g

# **Installing and Initializing Spark on Google Colab**
"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

!wget -q https://dlcdn.apache.org/spark/spark-3.5.0/spark-3.5.0-bin-hadoop3.tgz

!tar xf spark-3.5.0-bin-hadoop3.tgz

!pip install -q findspark





import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.5.0-bin-hadoop3"

import findspark
findspark.find()

!pip install pyspark py4j

findspark.init()

!pip install findspark

from pyspark.sql import SparkSession

spark = SparkSession.builder\
        .master("local")\
        .appName("Colab")\
        .config('spark.ui.port', '4050')\
        .getOrCreate()

from pyspark.sql import SQLContext
sqlContext = SQLContext(spark)

spark



"""# **Reading CSV File using Spark**"""

df = spark.read.csv("Airports2.csv", header=True, inferSchema=True)
df.registerTempTable('df')

"""# **Basic Insights into Data**"""

df.printSchema()

df.count()

df.describe().show()

"""# **Spark Transformation and Action Operations**"""

df.show(5)

df.select("Origin_airport","Destination_airport","Passengers","Seats").show(15)

from pyspark.sql import functions as F
from pyspark.sql.functions import col
from pyspark.sql.functions import desc
import pyspark.sql.utils

airportAgg_DF = df.groupBy("Origin_airport").agg(F.sum("Passengers"))
airportAgg_DF.show(10)

"""# **Spark SQL**

## **Highest Flight Departures Airport**
"""

originAirports = sqlContext.sql("""select Origin_Airport, sum(Flights) as Flights2
                                    from df group by Origin_Airport order by sum(Flights) DESC limit 10""")
originAirports.show()

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'originAirports' is a DataFrame
result_df = originAirports.toPandas()

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(result_df['Origin_Airport'], result_df['Flights2'])
plt.xlabel('Origin Airports')
plt.ylabel('Number of Flights')
plt.title('Top 10 Origin Airports by Number of Flights')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability

plt.show()

"""## **Highest Passenger Arrival Airport**"""

destinationAirports = sqlContext.sql("""select Destination_airport, sum(Passengers) as Passengers2
                                    from df group by Destination_airport order by sum(Passengers) DESC limit 10""")
destinationAirports.show()

import matplotlib.pyplot as plt
import pandas as pd

# Assuming that `destinationAirports` is a DataFrame from your query
# If it's not, you may need to convert the SQL result to a DataFrame first.

# Convert the DataFrame to a Pandas DataFrame
destinationAirports_pd = destinationAirports.toPandas()

# Plotting
plt.figure(figsize=(12, 6))
plt.bar(destinationAirports_pd['Destination_airport'], destinationAirports_pd['Passengers2'])
plt.xlabel('Destination Airport')
plt.ylabel('Passenger Count')
plt.title('Top 10 Destination Airports by Passenger Count')
plt.xticks(rotation=45)  # Rotate x-axis labels for readability
plt.tight_layout()

# Show the plot
plt.show()

"""## **Airports with Most Flights**"""

MostFlightsByAirports = sqlContext.sql("""with destination as (select Destination_airport as Airport, sum(Flights) as Out_Flights
                                    from df group by Destination_airport),
                                    origin as (select Origin_airport as Airport, sum(Flights) as In_Flights
                                    from df group by Origin_airport)
                                    select origin.Airport, (destination.Out_Flights+origin.In_Flights) as Total_Flights
                                    from origin, destination
                                    where origin.Airport = destination.Airport
                                    order by (origin.In_Flights + destination.Out_Flights) DESC
                                    limit 15""")
MostFlightsByAirports.show()

"""## **Airports with Most Passengers**"""

MostPassengersByAirports = sqlContext.sql("""with destination as (select Destination_airport as Airport, sum(Passengers*Flights) as Out_Passengers
                                    from df group by Destination_airport),
                                    origin as (select Origin_airport as Airport, sum(Passengers) as In_Passengers
                                    from df group by Origin_airport)
                                    select origin.Airport, (destination.Out_Passengers+origin.In_Passengers) as Total_Passengers
                                    from origin, destination
                                    where origin.Airport = destination.Airport
                                    order by (origin.In_Passengers + destination.Out_Passengers) DESC
                                    limit 15""")
MostPassengersByAirports.show()

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'MostPassengersByAirports' is a DataFrame
result_df = MostPassengersByAirports.toPandas()

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(result_df['Airport'], result_df['Total_Passengers'])
plt.xlabel('Airports')
plt.ylabel('Total Passengers')
plt.title('Top 15 Airports by Total Passengers')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability

plt.show()

"""## **Occupancy Rates for Routes with Most Flights**"""

distanceQuery = sqlContext.sql("""with table1 as
                                    (select least(Origin_airport, Destination_airport) as Airport1,
                                    greatest(Destination_airport, Origin_airport) as Airport2,
                                    sum(Flights) as Flights,
                                    sum(Passengers) as Passengers,
                                    sum(Seats) as Seats
                                    from df
                                    group by least(Origin_airport, Destination_airport), greatest(Destination_airport, Origin_airport)
                                    order by 1,2)
                                    select t.*, (Passengers*100/Seats) as Occupancy_Rate
                                    from table1 t
                                    order by Flights DESC, Seats DESC, Passengers DESC, Occupancy_Rate DESC
                                    limit 15;""")
distanceQuery = distanceQuery.filter((col("Occupancy_Rate").isNotNull()) & (col("Occupancy_Rate")<=100.0))
distanceQuery.show(15)



"""## **Number of Flights vs Distance - Part 1**"""

distanceQuery = sqlContext.sql("""with table1 as
                                    (select least(Origin_airport, Destination_airport) as Airport1,
                                    greatest(Destination_airport, Origin_airport) as Airport2,
                                    mean(Distance) as Distance,
                                    sum(Flights) as Flights
                                    from df
                                    group by least(Origin_airport, Destination_airport), greatest(Destination_airport, Origin_airport)
                                    order by 1,2)
                                    select t.*
                                    from table1 t
                                    where Flights>0
                                    order by Distance DESC
                                    limit 15;""")
# distanceQuery = distanceQuery.filter((col("Occupancy_Rate").isNotNull()) & (col("Occupancy_Rate")<=100.0))
distanceQuery.show(15)

"""## **Number of Flights vs Distance - Part 2**"""

distanceQuery = sqlContext.sql("""with table1 as
                                    (select least(Origin_airport, Destination_airport) as Airport1,
                                    greatest(Destination_airport, Origin_airport) as Airport2,
                                    mean(Distance) as Distance,
                                    sum(Flights) as Flights
                                    from df
                                    group by least(Origin_airport, Destination_airport), greatest(Destination_airport, Origin_airport)
                                    order by 1,2)
                                    select t.*
                                    from table1 t
                                    where Flights>0
                                    order by Flights DESC
                                    limit 15;""")
# distanceQuery = distanceQuery.filter((col("Occupancy_Rate").isNotNull()) & (col("Occupancy_Rate")<=100.0))
distanceQuery.show(15)

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'distanceQuery' is a DataFrame
result_df = distanceQuery.toPandas()

# Sort the DataFrame by 'Flights' in descending order
result_df = result_df.sort_values(by='Flights', ascending=False)

# Select the top 15 rows
result_df = result_df.head(15)

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(result_df['Airport1'] + ' to ' + result_df['Airport2'], result_df['Flights'])
plt.xlabel('Flight Routes')
plt.ylabel('Number of Flights')
plt.title('Top 15 Flight Routes by Number of Flights')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability

plt.show()

